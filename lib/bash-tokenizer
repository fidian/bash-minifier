#! /usr/bin/env bash

# shellcheck disable=SC1091
. bpm
bpm::include assign

bash-tokenizer::token() {
    local chunk cr noNewlines token

    token=$1
    chunk=$2
    cr=$'\n'
    BASH_TOKENIZER__TOKENS[${#BASH_TOKENIZER__TOKENS[@]}]="$token@$BASH_TOKENIZER__LINE:$BASH_TOKENIZER__CHAR $chunk"

    if [[ -n "${DEBUG-}" ]]; then
        printf "%-16s%-25s%4s:%-3s  %q\\n" "$token" "${BASH_TOKENIZER__CONTEXT[0]}" "$BASH_TOKENIZER__LINE" "$BASH_TOKENIZER__CHAR" "$chunk" >&2
    fi

    ((BASH_TOKENIZER__POS+=${#chunk}))
    noNewlines=${chunk//$cr}

    if [[ "${#noNewlines}" != "${#chunk}" ]]; then
        ((BASH_TOKENIZER__LINE+=${#chunk}-${#noNewlines}))
        chunk=${chunk##$cr}
        ((BASH_TOKENIZER__CHAR=1+${#chunk}))
    else
        ((BASH_TOKENIZER__CHAR+=${#chunk}))
    fi
}

bash-tokenizer::shebang() {
    local chunk

    if [[ ${BASH_TOKENIZER__CONTENT:0:2} == "#!" ]]; then
        chunk="${BASH_TOKENIZER__CONTENT%%$cr*}$cr"
        bash-tokenizer::token SHEBANG "$chunk"
    fi
}

bash-tokenizer::comment() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}
    bash-tokenizer::token COMMENT "$line"
}

bash-tokenizer::word() {
    local pos word

    pos=0

    while true; do
        case "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS + pos:1}" in
            "" | $'\n' | " " | $'\t' | '(' | ')' | '{' | '}' | '[' | ']' | '$' | '"' | "'" | "|" | "%")
                word="${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS:pos}"

                if ! bash-tokenizer::contextFlagExists VAR && [[ "$word" == *% ]]; then
                    # Include this as part of the word if not parsing a variable
                    ((pos+=1))
                elif [[ -n "$word" ]]; then
                    bash-tokenizer::token WORD "$word"

                    return
                else
                    bash-tokenizer::token UNKNOWN "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS + pos:1}"

                    return
                fi
                ;;

            *)
                ((pos+=1))
                ;;
        esac
    done
}

bash-tokenizer::ws() {
    local pos

    pos=0

    while true; do
        case "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS + pos:1}" in
            " " | $'\t')
                ((pos+=1))
                ;;

            *)
                bash-tokenizer::token WS "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS:pos}"
                return
                ;;
        esac
    done
}

bash-tokenizer::parenOpen() {
    local chunk cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        '('*)
            if [[ "$line" == '('*([[:space:]])')'* ]]; then
                chunk=${line%%)*}
                bash-tokenizer::token EMPTY_LIST "$chunk)"
            else
                bash-tokenizer::token PAREN_OPEN '('
                bash-tokenizer::contextPush SUBSHELL
            fi
            ;;
    esac
}

bash-tokenizer::parenClose() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        ')'*)
            bash-tokenizer::token PAREN_CLOSE ')'
            bash-tokenizer::contextPop
            ;;
    esac
}

bash-tokenizer::braceOpen() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        '{'*)
            bash-tokenizer::token BRACE_OPEN '{'
            bash-tokenizer::contextPush BLOCK
            ;;
    esac
}

bash-tokenizer::braceClose() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        '}'*)
            bash-tokenizer::token BRACE_CLOSE '}'
            bash-tokenizer::contextPop
            ;;
    esac
}

bash-tokenizer::bracketOpen() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        '[['*)
            bash-tokenizer::token D_BRACKET_OPEN '[['
            bash-tokenizer::contextPush D_BRACKET
            ;;

        '['*)
            bash-tokenizer::token BRACKET_OPEN '['
            bash-tokenizer::contextPush BRACKET
            ;;
    esac
}

bash-tokenizer::bracketClose() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        ']]'*)
            bash-tokenizer::token D_BRACKET_CLOSE '[['
            bash-tokenizer::contextPop
            ;;

        ']'*)
            bash-tokenizer::token BRACKET_CLOSE ']'
            bash-tokenizer::contextPop
            ;;
    esac
}

bash-tokenizer::lessThan() {
    local cr line

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        "<<"*)
            bash-tokenizer::token REDIR_HEREDOC '<<'
            bash-tokenizer::contextFlagAdd DOC
            ;;

        "<("*)
            bash-tokenizer::token REDIR_SUBSHELL '<('
            bash-tokenizer::contextPush SUBSHELL
            ;;

        '<'*)
            bash-tokenizer::token LT "<"
            ;;
    esac
}

bash-tokenizer::greaterThan() {
    # Need to work on this
    bash-tokenizer::token GT '>'
}

bash-tokenizer::heredocContent() {
    local content cr delim line tokenNum token

    tokenNum=${#BASH_TOKENIZER__TOKENS[@]}
    token=
    cr=$'\n'

    while [[ "$token" != REDIR_HEREDOC@* ]]; do
        ((tokenNum-=1))
        token=${BASH_TOKENIZER__TOKENS[tokenNum]}
    done

    # FIXME - This should consume all word-like tokens so delimiters like EOF''
    # and "a"b'c'$'d' all work.
    # FIXME - This doesn't handle <<- syntax.
    ((tokenNum+=1))
    token=${BASH_TOKENIZER__TOKENS[tokenNum]}
    delim=${token#* }
    delim=${delim//"'"}
    delim=${delim//'"'}
    content=
    line=

    while [[ "$line" != "$delim$cr" ]]; do
        content+=$line
        line=${BASH_TOKENIZER__CONTENT:$BASH_TOKENIZER__POS + ${#content}}
        line="${line%%$cr*}$cr"
    done

    content+=$line
    bash-tokenizer::token HEREDOC "$content"
    bash-tokenizer::contextFlagRemove DOC
}

bash-tokenizer::ansiEscape() {
    local char pos

    pos=2

    while true; do
        char=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS + pos:1}

        case "$char" in
            "'" | "")
                bash-tokenizer::token ANSI_ESCAPE "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS:pos + 1}"

                return
                ;;

            "\\")
                ((pos+=2))
                ;;

            *)
                ((pos+=1))
                ;;
        esac
    done
}

bash-tokenizer::stringFragment() {
    local len

    len=0

    while true; do
        case "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS + len:1}" in
            '"' | "\$" )
                if [[ "$len" != 0 ]]; then
                    bash-tokenizer::token STR_FRAGMENT "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS:len}"
                fi

                return
                ;;

            "\\")
                ((len+=2))
                ;;

            *)
                ((len+=1))
                ;;
        esac
    done
}

bash-tokenizer::stringStart() {
    bash-tokenizer::token STR_START '"'
    bash-tokenizer::contextFlagAdd STR
}

bash-tokenizer::stringEnd() {
    bash-tokenizer::token STR_END '"'
    bash-tokenizer::contextFlagRemove STR
}

bash-tokenizer::variable() {
    local cr line pos

    cr=$'\n'
    line=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS}
    line=${line%%$cr*}

    case "$line" in
        "\$("*)
            bash-tokenizer::token VAR_SUBSHELL "\$("
            bash-tokenizer::contextPush SUBSHELL
            bash-tokenizer::contextFlagAdd VAR
            ;;

        "\${#"* | "\${!"*)
            bash-tokenizer::token VAR_BRACE "${line:0:3}"
            bash-tokenizer::contextPush BLOCK
            bash-tokenizer::contextFlagAdd VAR
            ;;

        "\${"*)
            bash-tokenizer::token VAR_BRACE "\${"
            bash-tokenizer::contextPush BLOCK
            bash-tokenizer::contextFlagAdd VAR
            ;;

        "\$'"*)
            bash-tokenizer::ansiEscape
            ;;

        "\$"*)
            pos=1

            while true; do
                case "${line:pos:1}" in
                    [[:word:]] | @ | "!")
                        ((pos+=1))
                        ;;

                    *)
                        bash-tokenizer::token VAR "${line:0:pos}"

                        return
                        ;;
                esac
            done

            ;;
    esac
}

bash-tokenizer::stringLiteral() {
    local content

    content=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS + 1}
    content=${content%%"'"*}
    bash-tokenizer::token STR_LITERAL "'$content'"
}

bash-tokenizer::contextPop() {
    local oldIfs

    oldIfs=$IFS
    IFS=$'\n' # Needed for array slicing before Bash 4.0-rc1
    BASH_TOKENIZER__CONTEXT=("${BASH_TOKENIZER__CONTEXT[@]:1}")
    IFS=$oldIfs
}

bash-tokenizer::contextPush() {
    BASH_TOKENIZER__CONTEXT=("$1." ${BASH_TOKENIZER__CONTEXT[@]+"${BASH_TOKENIZER__CONTEXT[@]}"})
}

bash-tokenizer::contextFlagAdd() {
    BASH_TOKENIZER__CONTEXT[0]="${BASH_TOKENIZER__CONTEXT[0]//.$1./.}$1."
}

bash-tokenizer::contextFlagRemove() {
    BASH_TOKENIZER__CONTEXT[0]="${BASH_TOKENIZER__CONTEXT[0]//.$1./.}"
}

bash-tokenizer::contextFlagExists() {
    [[ "${BASH_TOKENIZER__CONTEXT[0]}" == *."$1".* ]]
}

bash-tokenizer::percent() {
    if bash-tokenizer::contextFlagExists VAR; then
        bash-tokenizer::token PERCENT %
    else
        bash-tokenizer::commandDefault
    fi
}

bash-tokenizer::commandDefault() {
    bash-tokenizer::word
    bash-tokenizer::contextFlagAdd ARG
}

bash-tokenizer::tokenizeString() {
    case "${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS:1}" in
        '"')
            bash-tokenizer::stringEnd
            ;;

        "\$")
            bash-tokenizer::variable
            ;;

        *)
            bash-tokenizer::stringFragment
            ;;
    esac
}

bash-tokenizer::tokenizeCommand() {
    local char

    char=${BASH_TOKENIZER__CONTENT:BASH_TOKENIZER__POS:1}

    case "$char" in
        "" | $'\n')
            bash-tokenizer::token EOL "$cr"
            bash-tokenizer::contextFlagRemove ARG

            if bash-tokenizer::contextFlagExists DOC; then
                bash-tokenizer::heredocContent
            fi
            ;;

        '(')
            bash-tokenizer::parenOpen
            ;;

        ')')
            bash-tokenizer::parenClose
            ;;

        '{')
            bash-tokenizer::braceOpen
            ;;

        '}')
            bash-tokenizer::braceClose
            ;;

        '[')
            bash-tokenizer::bracketOpen
            ;;

        ']')
            bash-tokenizer::bracketClose
            ;;

        '<')
            bash-tokenizer::lessThan
            ;;

        '>')
            bash-tokenizer::greaterThan
            ;;

        "#")
            bash-tokenizer::comment
            ;;

        " " | $'\t')
            bash-tokenizer::ws
            ;;

        "\$")
            bash-tokenizer::variable
            ;;

        "'")
            bash-tokenizer::stringLiteral
            ;;

        '"')
            bash-tokenizer::stringStart
            ;;

        '%')
            bash-tokenizer::percent
            ;;

        *)
            bash-tokenizer::commandDefault
            ;;
    esac
}

bash-tokenizer::tokenize() {
    local cr

    BASH_TOKENIZER__CONTENT=$2
    BASH_TOKENIZER__LINE=1
    BASH_TOKENIZER__CHAR=1
    BASH_TOKENIZER__POS=0
    BASH_TOKENIZER__CONTEXT=()
    BASH_TOKENIZER__TOKENS=()
    cr=$'\n'

    bash-tokenizer::contextPush SOURCE
    bash-tokenizer::shebang

    while [[ "$BASH_TOKENIZER__POS" -lt "${#BASH_TOKENIZER__CONTENT}" ]]; do
        if bash-tokenizer::contextFlagExists STR; then
            bash-tokenizer::tokenizeString
        else
            bash-tokenizer::tokenizeCommand
        fi
    done

    if [[ -n "$DEBUG" ]]; then
        if [[ "${#BASH_TOKENIZER__CONTEXT[@]}" != 1 ]]; then
            echo "WARNING: Terminating without cleaning context" >&2
            echo "${BASH_TOKENIZER__CONTEXT[@]}" >&2
        elif [[ "${BASH_TOKENIZER__CONTEXT[0]}" != SOURCE.* ]]; then
            echo "WARNING: Invalid terminating context" >&2
            echo "${BASH_TOKENIZER__CONTEXT[@]}" >&2
        fi
    fi

    local "$1" && assign::array "$1" ${BASH_TOKENIZER__TOKENS[@]+"${BASH_TOKENIZER__TOKENS[@]}"}
}
